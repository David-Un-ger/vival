services:
  devcontainer:
    container_name: devcontainer
    # image: vival-devcontainer:latest
    build:
     context: .
     dockerfile: Dockerfile
    restart: always
    volumes:
     - .:/workspace
    # command: ["sleep", "infinity"]
    # command: .venv/bin/python3 src/app.py
    # command: .venv/bin/gunicorn -b 0.0.0.0:80 -w 4 src.app:server
    command: .venv/bin/gunicorn -b [::]:80 -w 4 src.app:server
    ports:
      - "80:80"
    expose:
      - "80"
    networks:
     - default


  cloudflared:
    image: cloudflare/cloudflared:latest
    restart: unless-stopped
    command: tunnel --no-autoupdate run
    environment:
      - TUNNEL_TOKEN=${CLOUDFLARE_TUNNEL_TOKEN}
    networks:
      - default

  postgres:
    image: postgres:latest
    container_name: postgres_db
    restart: always
    env_file:
      - .env
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data

  pgadmin:
    image: dpage/pgadmin4
    container_name: pgadmin
    restart: always
    env_file:
      - .env
    ports:
      - "5050:80"  # http://localhost:5050
    volumes:
      - pgadmin_data:/var/lib/pgadmin

  # nginx:
  #   image: nginx:latest
  #   container_name: nginx-proxy
  #   restart: always
  #   ports:
  #     - "80:80"
  #     - "443:443"
  #   volumes:
  #     - ./config/nginx.conf:/etc/nginx/nginx.conf
  #     - ./certs:/etc/letsencrypt
  #   networks:
  #     - default


  certbot:
    image: certbot/certbot
    container_name: certbot
    command: certonly --webroot --webroot-path=/var/www/certbot -d vival.ai
    volumes:
      - ./certs:/etc/letsencrypt  # Share certs volume with nginx
      - ./certbot-webroot:/var/www/certbot  # Temporary directory for webroot
    networks:
      - default


  ddclient:
    image: lscr.io/linuxserver/ddclient:latest
    container_name: ddclient
    environment:
      - PUID=1000
      - PGID=1000
      - TZ=Europe/Berlin
    env_file:
      - .env
    volumes:
      - ./config:/config
      # - ./config/ddclient.conf:/etc/ddclient/ddclient.conf
    restart: unless-stopped
  
volumes:
  pgadmin_data:
  postgres_data:


networks:
  default:
    driver: bridge